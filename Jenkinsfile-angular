node {
    stage('import') {
        try {
            checkout scm
        } catch(exc) {
            slackError('import')
            throw exc
        }
    }
    stage('build') {
        try {
            slackStatus('build')
            dir('BrewTodoAngular') {
                bat 'npm install'
                bat 'npm run build'
            }
        } catch(exc) {
            slackError('build')
            throw exc
        }
    }
    stage('test') {
        try {
            slackStatus('test')
            //TODO need browser capture
            dir('BrewTodoAngular') {
                //bat "VSTest.Console.exe BrewTodoAngularTests\\bin\\Debug\\BrewTodoAngularTests.dll"
            }
        } catch(exc) {
            slackError('test')
            throw exc
        } 
    }
    stage('analyze') {
        try {
            slackStatus('analyze')
            //TODO need SonarQube for Angular
            dir('BrewTodoAngular') {
                //bat 'SonarQube.Scanner.MSBuild.exe begin /k:\"brewtodo-angular-key\" /d:sonar.organization=\"brewtodo-group\" /d:sonar.host.url=\"https://sonarcloud.io\"'
                //bat 'msbuild /t:rebuild'
                //bat 'SonarQube.Scanner.MSBuild.exe end'
            }
        } catch(exc) {
            slackError('analyze')
            throw exc
        }
    }
    stage('package') {
        try {
            slackStatus('package')
            dir('BrewTodoAngular') {
                bat 'npm run build -- --base-href /BrewTodoAngular/ --prod'
<<<<<<< HEAD
                bat 'copy /y web.config dist'
                // ng build inside jenkins workspace doesn't
                bat 'copy /y src\\favicon.ico dist'
                bat 'md dist\\assets\\images'
                bat 'copy /y src\\assets\\images\\*.png dist\\assets\\images'
=======
                //bat 'copy /y web.config dist'
                // ng build inside jenkins workspace doesn't
                //bat 'copy /y src\\favicon.ico dist'
                //bat 'md dist\\assets\\images'
                //bat 'copy /y src\\assets\\images\\*.png dist\\assets\\images'
>>>>>>> BrewTodoAngular
            }
        } catch(exc) {
            slackError('package')
            throw exc
        }
    }
    stage("deploy (angular)") {
        try {
            slackStatus("deploy (angular)")
            dir('BrewTodoAngular\\dist\\BrewTodoAngular') {
                bat "msdeploy -verb:sync -source:contentPath=\"%CD%\" -dest:contentPath=\"Default Web Site/BrewTodoAngular\",wmsvc=${env.angular_address},userName=Administrator,password=\"${env.angular_password}\" -enableRule:AppOffline -allowUntrusted"
            }
        } catch(exc) {
            slackError("deploy (angular)")
            throw exc
        }
    }
    stage('success') {
        slackSend color: 'good', message: "Pipeline end reached. [<${JOB_URL}|${env.JOB_NAME}> <${env.BUILD_URL}console|${env.BUILD_DISPLAY_NAME}>] [${currentBuild.durationString[0..-14]}]"
    }
}

def slackStatus(stageName) {
    slackSend message: "${stageName} stage reached. [<${JOB_URL}|${env.JOB_NAME}> <${env.BUILD_URL}console|${env.BUILD_DISPLAY_NAME}>] [${currentBuild.durationString[0..-14]}]"
}

def slackError(stageName) {
    slackSend color: 'danger', message: "${stageName} stage failed. [<${JOB_URL}|${env.JOB_NAME}> <${env.BUILD_URL}console|${env.BUILD_DISPLAY_NAME}>] [${currentBuild.durationString[0..-14]}]"
}
